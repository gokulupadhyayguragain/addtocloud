version: '3.8'

services:
  # Frontend Application
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    container_name: addtocloud-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
      - NODE_ENV=production
    volumes:
      - ./apps/frontend/out:/app/out
    networks:
      - addtocloud-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: addtocloud-backend
    restart: unless-stopped
    ports:
      - "8080:3001"
    environment:
      - PORT=3001
      - NODE_ENV=production
      - DATABASE_URL=postgres://addtocloud:addtocloud_secure_2024@postgres:5432/addtocloud_prod?sslmode=disable
      - MONGODB_URL=mongodb://addtocloud:addtocloud_mongo_2024@mongodb:27017/addtocloud_logs
      - REDIS_URL=redis://:addtocloud_redis_2024@redis:6379/0
      - JWT_SECRET=addtocloud_jwt_secret_key_2024_very_secure
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080
    volumes:
      - ./apps/backend/logs:/app/logs
    networks:
      - addtocloud-network
    depends_on:
      - postgres
      - mongodb
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Credential Service
  credential-service:
    build:
      context: ./apps/credential-service
      dockerfile: Dockerfile
    container_name: addtocloud-credential-service
    restart: unless-stopped
    ports:
      - "8888:8080"
    environment:
      - PORT=8080
      - DATABASE_URL=postgres://addtocloud:addtocloud_secure_2024@postgres:5432/addtocloud_prod?sslmode=disable
      - MONGODB_URL=mongodb://addtocloud:addtocloud_mongo_2024@mongodb:27017/addtocloud_logs
      - REDIS_URL=redis://:addtocloud_redis_2024@redis:6379/0
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_FROM=info@addtocloud.tech
      - SMTP_TO=admin@addtocloud.tech
      - ENABLE_EMAIL_NOTIFICATIONS=true
      - ENABLE_MANUAL_APPROVAL=true
    volumes:
      - ./apps/credential-service/logs:/app/logs
    networks:
      - addtocloud-network
    depends_on:
      - postgres
      - mongodb
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: addtocloud-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: addtocloud_prod
      POSTGRES_USER: addtocloud
      POSTGRES_PASSWORD: addtocloud_secure_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - addtocloud-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U addtocloud -d addtocloud_prod"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: addtocloud-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: addtocloud
      MONGO_INITDB_ROOT_PASSWORD: addtocloud_mongo_2024
      MONGO_INITDB_DATABASE: addtocloud_logs
    ports:
      - "27018:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./database/mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - addtocloud-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: addtocloud-redis
    restart: unless-stopped
    command: redis-server --requirepass addtocloud_redis_2024 --appendonly yes
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - addtocloud-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: addtocloud-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    networks:
      - addtocloud-network
    depends_on:
      - frontend
      - backend
      - credential-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring: Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: addtocloud-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - addtocloud-network

  # Monitoring: Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: addtocloud-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=addtocloud_admin_2024
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana:/etc/grafana/provisioning
    networks:
      - addtocloud-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  addtocloud-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
