apiVersion: v1
kind: ConfigMap
metadata:
  name: addtocloud-real-api-code
  namespace: default
data:
  main.go: |
    package main

    import (
      "encoding/json"
      "fmt"
      "log"
      "net/http"
      "net/smtp"
      "os"
      "time"
    )

    type ContactRequest struct {
      Name    string `json:"name"`
      Email   string `json:"email"`
      Subject string `json:"subject,omitempty"`
      Message string `json:"message"`
    }

    type LoginRequest struct {
      Email    string `json:"email"`
      Password string `json:"password"`
    }

    func sendEmail(to, subject, body string) error {
      smtpHost := os.Getenv("SMTP_HOST")
      smtpPort := os.Getenv("SMTP_PORT")
      smtpUser := os.Getenv("SMTP_USERNAME")
      smtpPass := os.Getenv("SMTP_PASSWORD")
      smtpFrom := os.Getenv("SMTP_FROM")

      if smtpHost == "" || smtpUser == "" || smtpPass == "" {
        log.Println("Email not configured, skipping send")
        return fmt.Errorf("email not configured")
      }

      // Create message
      msg := fmt.Sprintf("From: %s\r\nTo: %s\r\nSubject: %s\r\n\r\n%s", smtpFrom, to, subject, body)

      // SMTP configuration for Zoho
      auth := smtp.PlainAuth("", smtpUser, smtpPass, smtpHost)

      // Send email via Zoho SMTP
      err := smtp.SendMail(smtpHost+":"+smtpPort, auth, smtpFrom, []string{to}, []byte(msg))
      if err != nil {
        log.Printf("Failed to send email: %v", err)
        return err
      }

      log.Printf("Email sent successfully to %s", to)
      return nil
    }

    func corsHeaders(w http.ResponseWriter) {
      w.Header().Set("Access-Control-Allow-Origin", "*")
      w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
      w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")
    }

    func healthHandler(w http.ResponseWriter, r *http.Request) {
      corsHeaders(w)
      w.Header().Set("Content-Type", "application/json")

      cluster := os.Getenv("CLUSTER_NAME")
      if cluster == "" {
        cluster = "AWS-EKS"
      }

      response := map[string]interface{}{
        "status":    "healthy",
        "message":   "AddToCloud Real API with Email is running",
        "cluster":   cluster,
        "timestamp": time.Now().Format(time.RFC3339),
        "version":   "2.1.0",
        "features":  []string{"contact-form", "email-notifications", "authentication"},
      }
      json.NewEncoder(w).Encode(response)
    }

    func contactHandler(w http.ResponseWriter, r *http.Request) {
      corsHeaders(w)
      w.Header().Set("Content-Type", "application/json")

      if r.Method == "OPTIONS" {
        w.WriteHeader(http.StatusOK)
        return
      }

      if r.Method != "POST" {
        w.WriteHeader(http.StatusMethodNotAllowed)
        json.NewEncoder(w).Encode(map[string]string{"error": "Method not allowed"})
        return
      }

      var req ContactRequest
      if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
        w.WriteHeader(http.StatusBadRequest)
        json.NewEncoder(w).Encode(map[string]string{"error": "Invalid request"})
        return
      }

      if req.Name == "" || req.Email == "" || req.Message == "" {
        w.WriteHeader(http.StatusBadRequest)
        json.NewEncoder(w).Encode(map[string]string{"error": "Missing required fields"})
        return
      }

      // Send email notification
      adminEmail := os.Getenv("ADMIN_EMAIL")
      if adminEmail == "" {
        adminEmail = "admin@addtocloud.tech"
      }

      emailSubject := "New Contact Request - AddToCloud"
      emailBody := fmt.Sprintf(`New contact request received:

Name: %s
Email: %s
Subject: %s
Message: %s

Timestamp: %s

---
This is an automated notification from AddToCloud Platform
Please respond to: %s`,
        req.Name, req.Email, req.Subject, req.Message, time.Now().Format(time.RFC3339), req.Email)

      // Send email in background
      go func() {
        if err := sendEmail(adminEmail, emailSubject, emailBody); err != nil {
          log.Printf("Failed to send notification email: %v", err)
        }
      }()

      log.Printf("Contact request received: Name=%s, Email=%s, Subject=%s", req.Name, req.Email, req.Subject)

      response := map[string]interface{}{
        "status":       "received",
        "message":      "Your message has been received successfully! An email notification has been sent to our team.",
        "timestamp":    time.Now().Format(time.RFC3339),
        "request_id":   fmt.Sprintf("req_%d", time.Now().Unix()),
        "notify_email": adminEmail,
      }
      json.NewEncoder(w).Encode(response)
    }

    func loginHandler(w http.ResponseWriter, r *http.Request) {
      corsHeaders(w)
      w.Header().Set("Content-Type", "application/json")

      if r.Method == "OPTIONS" {
        w.WriteHeader(http.StatusOK)
        return
      }

      if r.Method != "POST" {
        w.WriteHeader(http.StatusMethodNotAllowed)
        json.NewEncoder(w).Encode(map[string]string{"error": "Method not allowed"})
        return
      }

      var req LoginRequest
      if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
        w.WriteHeader(http.StatusBadRequest)
        json.NewEncoder(w).Encode(map[string]string{"error": "Invalid request"})
        return
      }

      if req.Email == "" || req.Password == "" {
        w.WriteHeader(http.StatusBadRequest)
        json.NewEncoder(w).Encode(map[string]string{"error": "Email and password are required"})
        return
      }

      log.Printf("Login attempt for email: %s", req.Email)

      // Simple authentication for now
      if req.Email == "admin@addtocloud.tech" && req.Password == "admin123" {
        response := map[string]interface{}{
          "status":  "success",
          "message": "Login successful",
          "token":   fmt.Sprintf("token_%d", time.Now().Unix()),
          "user": map[string]interface{}{
            "id":    1,
            "email": req.Email,
            "name":  "Admin User",
            "role":  "admin",
          },
          "timestamp": time.Now().Format(time.RFC3339),
        }
        json.NewEncoder(w).Encode(response)
        return
      }

      if req.Email == "user@addtocloud.tech" && req.Password == "user123" {
        response := map[string]interface{}{
          "status":  "success",
          "message": "Login successful",
          "token":   fmt.Sprintf("token_%d", time.Now().Unix()),
          "user": map[string]interface{}{
            "id":    2,
            "email": req.Email,
            "name":  "Test User",
            "role":  "user",
          },
          "timestamp": time.Now().Format(time.RFC3339),
        }
        json.NewEncoder(w).Encode(response)
        return
      }

      w.WriteHeader(http.StatusUnauthorized)
      json.NewEncoder(w).Encode(map[string]string{"error": "Invalid credentials"})
    }

    func main() {
      // Setup routes
      http.HandleFunc("/api/health", healthHandler)
      http.HandleFunc("/api/v1/contact", contactHandler)
      http.HandleFunc("/api/v1/auth/login", loginHandler)
      http.HandleFunc("/contact", contactHandler)
      http.HandleFunc("/auth/login", loginHandler)

      port := os.Getenv("PORT")
      if port == "" {
        port = "8080"
      }

      log.Printf("Starting AddToCloud Real API on port %s", port)
      log.Printf("Cluster: %s", os.Getenv("CLUSTER_NAME"))
      log.Printf("SMTP Host: %s", os.Getenv("SMTP_HOST"))
      log.Printf("Admin Email: %s", os.Getenv("ADMIN_EMAIL"))
      log.Printf("Health endpoint: /api/health")
      log.Printf("Contact endpoint: /contact and /api/v1/contact")
      log.Printf("Login endpoint: /auth/login and /api/v1/auth/login")
      log.Fatal(http.ListenAndServe(":"+port, nil))
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: addtocloud-email-config
  namespace: default
type: Opaque
stringData:
  SMTP_HOST: "smtp.zoho.com"
  SMTP_PORT: "587"
  SMTP_USERNAME: "noreply@addtocloud.tech"
  SMTP_PASSWORD: "REPLACE_WITH_ZOHO_APP_PASSWORD"  # You need to replace this
  SMTP_FROM: "noreply@addtocloud.tech"
  ADMIN_EMAIL: "admin@addtocloud.tech"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: addtocloud-api-config
  namespace: default
data:
  CLUSTER_NAME: "AWS-EKS"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: addtocloud-real-api
  namespace: default
  annotations:
    sidecar.istio.io/inject: "false"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: addtocloud-real-api
  template:
    metadata:
      labels:
        app: addtocloud-real-api
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - name: api
        image: golang:1.22-alpine
        command: ["/bin/sh"]
        args:
        - -c
        - |
          apk add --no-cache git ca-certificates
          cd /app
          go mod init addtocloud-api
          go build -o addtocloud-api main.go
          ./addtocloud-api
        ports:
        - containerPort: 8080
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: addtocloud-api-config
              key: CLUSTER_NAME
        - name: SMTP_HOST
          valueFrom:
            secretKeyRef:
              name: addtocloud-email-config
              key: SMTP_HOST
        - name: SMTP_PORT
          valueFrom:
            secretKeyRef:
              name: addtocloud-email-config
              key: SMTP_PORT
        - name: SMTP_USERNAME
          valueFrom:
            secretKeyRef:
              name: addtocloud-email-config
              key: SMTP_USERNAME
        - name: SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: addtocloud-email-config
              key: SMTP_PASSWORD
        - name: SMTP_FROM
          valueFrom:
            secretKeyRef:
              name: addtocloud-email-config
              key: SMTP_FROM
        - name: ADMIN_EMAIL
          valueFrom:
            secretKeyRef:
              name: addtocloud-email-config
              key: ADMIN_EMAIL
        - name: PORT
          value: "8080"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        workingDir: /app
        volumeMounts:
        - name: api-code
          mountPath: /app/main.go
          subPath: main.go
      volumes:
      - name: api-code
        configMap:
          name: addtocloud-real-api-code
---
apiVersion: v1
kind: Service
metadata:
  name: addtocloud-real-api-service
  namespace: default
spec:
  selector:
    app: addtocloud-real-api
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
  type: LoadBalancer
