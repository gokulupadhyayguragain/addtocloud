apiVersion: v1
kind: ConfigMap
metadata:
  name: email-service-config
  namespace: default
data:
  requirements.txt: |
    Flask==2.3.3
    Flask-CORS==4.0.0
    gunicorn==21.2.0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: addtocloud-email-service
  namespace: default
  labels:
    app: addtocloud-email-service
    version: v1.0.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: addtocloud-email-service
  template:
    metadata:
      labels:
        app: addtocloud-email-service
        version: v1.0.0
    spec:
      containers:
      - name: email-service
        image: python:3.11-slim
        ports:
        - containerPort: 5000
          name: http
        env:
        - name: PORT
          value: "5000"
        - name: FLASK_ENV
          value: "production"
        command: ["/bin/bash"]
        args:
        - -c
        - |
          echo "Installing dependencies..."
          pip install Flask==2.3.3 Flask-CORS==4.0.0 gunicorn==21.2.0
          
          echo "Creating email service..."
          cat > /app/email-service.py << 'EOF'
          import smtplib
          import json
          import logging
          from email.mime.text import MIMEText
          from email.mime.multipart import MIMEMultipart
          from datetime import datetime
          import os
          from flask import Flask, request, jsonify
          from flask_cors import CORS

          app = Flask(__name__)
          CORS(app)

          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          ZOHO_CONFIG = {
              'host': 'smtp.zoho.com',
              'port': 587,
              'user': 'noreply@addtocloud.tech',
              'password': 'xcBP8i1URm7n',
              'admin_email': 'admin@addtocloud.tech'
          }

          class ZohoEmailService:
              def __init__(self):
                  self.smtp_host = ZOHO_CONFIG['host']
                  self.smtp_port = ZOHO_CONFIG['port']
                  self.username = ZOHO_CONFIG['user']
                  self.password = ZOHO_CONFIG['password']
                  self.admin_email = ZOHO_CONFIG['admin_email']
              
              def send_contact_notification(self, contact_data):
                  try:
                      msg = MIMEMultipart('alternative')
                      msg['Subject'] = f"New Contact Form Submission from {contact_data['name']}"
                      msg['From'] = self.username
                      msg['To'] = self.admin_email
                      
                      html_content = f"""
                      <html>
                      <body>
                          <h2 style="color: #2563eb;">New Contact Form Submission</h2>
                          <div style="background-color: #f8fafc; padding: 20px; border-radius: 8px;">
                              <p><strong>Name:</strong> {contact_data['name']}</p>
                              <p><strong>Email:</strong> {contact_data['email']}</p>
                              <p><strong>Service:</strong> {contact_data.get('service', 'Not specified')}</p>
                              <p><strong>Submitted:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} UTC</p>
                          </div>
                          <div style="padding: 20px; border-left: 4px solid #2563eb; margin: 20px 0;">
                              <h3>Message:</h3>
                              <p>{contact_data['message']}</p>
                          </div>
                          <hr>
                          <p style="color: #64748b; font-size: 14px;">
                              This email was sent from AddToCloud.tech contact form.
                          </p>
                      </body>
                      </html>
                      """
                      
                      html_part = MIMEText(html_content, 'html')
                      msg.attach(html_part)
                      
                      with smtplib.SMTP(self.smtp_host, self.smtp_port) as server:
                          server.starttls()
                          server.login(self.username, self.password)
                          server.send_message(msg)
                      
                      logger.info(f"Contact form email sent successfully to {self.admin_email}")
                      return {'success': True, 'message': 'Email sent successfully'}
                      
                  except Exception as e:
                      logger.error(f"Failed to send contact form email: {str(e)}")
                      return {'success': False, 'error': str(e)}

          email_service = ZohoEmailService()

          @app.route('/health', methods=['GET'])
          def health_check():
              return jsonify({
                  'status': 'healthy',
                  'service': 'AddToCloud Email Service',
                  'version': '1.0.0',
                  'smtp_configured': True,
                  'zoho_host': ZOHO_CONFIG['host']
              })

          @app.route('/send/contact', methods=['POST'])
          def send_contact_email():
              try:
                  data = request.get_json()
                  
                  required_fields = ['name', 'email', 'message']
                  for field in required_fields:
                      if not data.get(field):
                          return jsonify({
                              'success': False,
                              'error': f'Missing required field: {field}'
                          }), 400
                  
                  result = email_service.send_contact_notification(data)
                  
                  if result['success']:
                      return jsonify({
                          'success': True,
                          'message': 'Contact form email sent successfully',
                          'timestamp': datetime.now().isoformat()
                      })
                  else:
                      return jsonify({
                          'success': False,
                          'error': result['error']
                      }), 500
                      
              except Exception as e:
                  logger.error(f"Error in send_contact_email: {str(e)}")
                  return jsonify({
                      'success': False,
                      'error': 'Internal server error'
                  }), 500

          @app.route('/test/smtp', methods=['GET'])
          def test_smtp_connection():
              try:
                  with smtplib.SMTP(ZOHO_CONFIG['host'], ZOHO_CONFIG['port']) as server:
                      server.starttls()
                      server.login(ZOHO_CONFIG['user'], ZOHO_CONFIG['password'])
                  
                  return jsonify({
                      'success': True,
                      'message': 'SMTP connection successful',
                      'host': ZOHO_CONFIG['host'],
                      'port': ZOHO_CONFIG['port'],
                      'user': ZOHO_CONFIG['user']
                  })
                  
              except Exception as e:
                  return jsonify({
                      'success': False,
                      'error': str(e),
                      'message': 'SMTP connection failed'
                  }), 500

          if __name__ == '__main__':
              port = int(os.environ.get('PORT', 5000))
              app.run(host='0.0.0.0', port=port, debug=False)
          EOF
          
          echo "Starting email service..."
          cd /app
          python email-service.py
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: addtocloud-email-service
  namespace: default
  labels:
    app: addtocloud-email-service
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 5000
    protocol: TCP
    name: http
  selector:
    app: addtocloud-email-service
