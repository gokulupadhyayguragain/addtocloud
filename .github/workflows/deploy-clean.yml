name: 🚀 Deploy AddToCloud Platform

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      deploy_frontend:
        description: 'Deploy frontend to Cloudflare'
        required: false
        default: true
        type: boolean
      deploy_backend:
        description: 'Deploy backend to clouds'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  GO_VERSION: '1.21'
  TERRAFORM_VERSION: '1.6.0'

jobs:
  build-and-test:
    name: 🧪 Build & Test
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - 'wrangler.toml'
            backend:
              - 'backend/**'

      - name: 🟢 Setup Node.js
        if: steps.changes.outputs.frontend == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 🔵 Setup Go
        if: steps.changes.outputs.backend == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 📦 Install frontend dependencies
        if: steps.changes.outputs.frontend == 'true'
        working-directory: ./frontend
        run: npm ci

      - name: 🧪 Test and build frontend
        if: steps.changes.outputs.frontend == 'true'
        working-directory: ./frontend
        run: |
          npm run test
          npm run build:export

      - name: 🧪 Test and build backend
        if: steps.changes.outputs.backend == 'true'
        working-directory: ./backend
        run: |
          go mod download
          go test ./...
          go build -o bin/addtocloud ./cmd/main.go

  deploy-frontend:
    name: ☁️ Deploy Frontend (Cloudflare)
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: needs.build-and-test.outputs.frontend-changed == 'true' || github.event.inputs.deploy_frontend == 'true'
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🏗️ Build frontend
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: ${{ github.ref == 'refs/heads/main' && 'https://api.addtocloud.tech' || 'https://staging-api.addtocloud.tech' }}
          NEXT_PUBLIC_APP_URL: ${{ github.ref == 'refs/heads/main' && 'https://addtocloud.tech' || 'https://staging.addtocloud.tech' }}
          NEXT_PUBLIC_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
        run: npm run build:export

      - name: 🚀 Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: addtocloud-frontend
          directory: frontend/out
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  deploy-backend-azure:
    name: 🔵 Deploy Backend (Azure)
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: needs.build-and-test.outputs.backend-changed == 'true' || github.event.inputs.deploy_backend == 'true'
    environment: azure-${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: ☁️ Configure Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🏗️ Deploy Azure Infrastructure
        working-directory: ./infrastructure/terraform/azure
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform apply tfplan

      - name: 🎯 Deploy to AKS
        run: |
          az aks get-credentials --resource-group addtocloud-rg --name addtocloud-aks
          kubectl apply -f infrastructure/kubernetes/deployments/ -n addtocloud || true
          kubectl apply -f infrastructure/istio/ -n addtocloud || true

  deploy-backend-aws:
    name: 🟠 Deploy Backend (AWS)
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: needs.build-and-test.outputs.backend-changed == 'true' || github.event.inputs.deploy_backend == 'true'
    environment: aws-${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: ☁️ Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🏗️ Deploy AWS Infrastructure
        working-directory: ./infrastructure/terraform/aws
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform apply tfplan

      - name: 🎯 Deploy to EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name addtocloud-eks
          kubectl apply -f infrastructure/kubernetes/deployments/ -n addtocloud || true
          kubectl apply -f infrastructure/istio/ -n addtocloud || true

  deploy-backend-gcp:
    name: 🔴 Deploy Backend (GCP)
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: needs.build-and-test.outputs.backend-changed == 'true' || github.event.inputs.deploy_backend == 'true'
    environment: gcp-${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: ☁️ Configure GCP CLI
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🏗️ Deploy GCP Infrastructure
        working-directory: ./infrastructure/terraform/gcp
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform apply tfplan

      - name: 🎯 Deploy to GKE
        run: |
          gcloud container clusters get-credentials addtocloud-gke --zone us-central1-a --project ${{ secrets.GCP_PROJECT_ID }}
          kubectl apply -f infrastructure/kubernetes/deployments/ -n addtocloud || true
          kubectl apply -f infrastructure/istio/ -n addtocloud || true

  notify:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend-azure, deploy-backend-aws, deploy-backend-gcp]
    if: always()

    steps:
      - name: 📢 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: ${{ needs.deploy-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Azure Backend**: ${{ needs.deploy-backend-azure.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AWS Backend**: ${{ needs.deploy-backend-aws.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GCP Backend**: ${{ needs.deploy-backend-gcp.result }}" >> $GITHUB_STEP_SUMMARY
