name: 🚀 Deploy AddToCloud Platform

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      deploy_frontend:
        description: 'Deploy frontend to Cloudflare'
        required: false
        default: true
        type: boolean
      deploy_backend:
        description: 'Deploy backend to clouds'
        required: false
        default: true
        type: boolean
      clouds:
        description: 'Cloud providers to deploy to'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - azure
          - aws
          - gcp
          - azure,aws
          - azure,gcp
          - aws,gcp

env:
  NODE_VERSION: '18'
  GO_VERSION: '1.21'
  TERRAFORM_VERSION: '1.6.0'

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: 🧪 Build & Test
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      infrastructure-changed: ${{ steps.changes.outputs.infrastructure }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - 'wrangler.toml'
            backend:
              - 'backend/**'
              - 'go.mod'
              - 'go.sum'
            infrastructure:
              - 'infrastructure/**'
              - 'scripts/**'

      - name: 🟢 Setup Node.js
        if: steps.changes.outputs.frontend == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 🔵 Setup Go
        if: steps.changes.outputs.backend == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: backend/go.sum

      - name: 📦 Install frontend dependencies
        if: steps.changes.outputs.frontend == 'true'
        working-directory: ./frontend
        run: npm ci

      - name: 📦 Install backend dependencies
        if: steps.changes.outputs.backend == 'true'
        working-directory: ./backend
        run: go mod download

      - name: 🧪 Test frontend
        if: steps.changes.outputs.frontend == 'true'
        working-directory: ./frontend
        run: |
          npm run test:coverage
          npm run build

      - name: 🧪 Test backend
        if: steps.changes.outputs.backend == 'true'
        working-directory: ./backend
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go build -o bin/addtocloud ./cmd/main.go

      - name: 📊 Upload coverage reports
        if: steps.changes.outputs.frontend == 'true' || steps.changes.outputs.backend == 'true'
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info,./backend/coverage.out
          flags: unittests
          name: addtocloud-coverage

  # Job 2: Security Scanning
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    if: needs.build-and-test.outputs.frontend-changed == 'true' || needs.build-and-test.outputs.backend-changed == 'true'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔐 Run CodeQL analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript,go

      - name: 🔍 Perform CodeQL analysis
        uses: github/codeql-action/analyze@v2

  # Job 3: Build Docker Images
  build-images:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: needs.build-and-test.outputs.backend-changed == 'true'
    strategy:
      matrix:
        service: [frontend, backend]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Azure Container Registry
        if: contains(github.event.inputs.clouds, 'azure') || github.event.inputs.clouds == 'all' || github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: 🔑 Login to AWS ECR
        if: contains(github.event.inputs.clouds, 'aws') || github.event.inputs.clouds == 'all' || github.ref == 'refs/heads/main'
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: 🔑 Login to GCP Artifact Registry
        if: contains(github.event.inputs.clouds, 'gcp') || github.event.inputs.clouds == 'all' || github.ref == 'refs/heads/main'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🔧 Configure GCP Docker
        if: contains(github.event.inputs.clouds, 'gcp') || github.event.inputs.clouds == 'all' || github.ref == 'refs/heads/main'
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: 🏷️ Generate tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.ACR_LOGIN_SERVER }}/addtocloud-${{ matrix.service }}
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/addtocloud-${{ matrix.service }}
            ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/addtocloud/addtocloud-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/docker/Dockerfile.${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 4: Deploy Frontend to Cloudflare
  deploy-frontend:
    name: ☁️ Deploy Frontend (Cloudflare)
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: (needs.build-and-test.outputs.frontend-changed == 'true' && github.event.inputs.deploy_frontend != 'false') || github.event.inputs.deploy_frontend == 'true'
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ github.ref == 'refs/heads/main' && 'https://addtocloud.tech' || 'https://staging.addtocloud.tech' }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🏗️ Build frontend
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: ${{ github.ref == 'refs/heads/main' && 'https://api.addtocloud.tech' || 'https://staging-api.addtocloud.tech' }}
          NEXT_PUBLIC_APP_URL: ${{ github.ref == 'refs/heads/main' && 'https://addtocloud.tech' || 'https://staging.addtocloud.tech' }}
          NEXT_PUBLIC_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
        run: npm run build:export

      - name: 🚀 Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: addtocloud-frontend
          directory: frontend/out
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          wranglerVersion: '3'

      - name: 📢 Deployment notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  # Job 5: Deploy Infrastructure and Backend
  deploy-backend:
    name: 🏗️ Deploy Backend Infrastructure
    runs-on: ubuntu-latest
    needs: [build-and-test, build-images]
    if: (needs.build-and-test.outputs.backend-changed == 'true' || needs.build-and-test.outputs.infrastructure-changed == 'true') && github.event.inputs.deploy_backend != 'false'
    strategy:
      matrix:
        cloud: 
          - ${{ contains(github.event.inputs.clouds, 'azure') || github.event.inputs.clouds == 'all' || github.ref == 'refs/heads/main' && 'azure' || '' }}
          - ${{ contains(github.event.inputs.clouds, 'aws') || github.event.inputs.clouds == 'all' || github.ref == 'refs/heads/main' && 'aws' || '' }}
          - ${{ contains(github.event.inputs.clouds, 'gcp') || github.event.inputs.clouds == 'all' || github.ref == 'refs/heads/main' && 'gcp' || '' }}
        exclude:
          - cloud: ''
    environment: 
      name: ${{ matrix.cloud }}-${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: ☁️ Configure Azure CLI
        if: matrix.cloud == 'azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ☁️ Configure AWS CLI
        if: matrix.cloud == 'aws'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: ☁️ Configure GCP CLI
        if: matrix.cloud == 'gcp'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🏗️ Terraform Init
        working-directory: ./infrastructure/terraform/${{ matrix.cloud }}
        run: |
          terraform init \
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -backend-config="resource_group_name=addtocloud-tfstate" \
            -backend-config="storage_account_name=addtocloudtfstate" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=${{ matrix.cloud }}-${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}.tfstate"

      - name: 🔍 Terraform Plan
        working-directory: ./infrastructure/terraform/${{ matrix.cloud }}
        env:
          TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
          TF_VAR_project_name: addtocloud
        run: terraform plan -out=tfplan

      - name: 🚀 Terraform Apply
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        working-directory: ./infrastructure/terraform/${{ matrix.cloud }}
        run: terraform apply tfplan

      - name: 🎯 Deploy to Kubernetes
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        run: |
          # Get cluster credentials
          case "${{ matrix.cloud }}" in
            azure)
              az aks get-credentials --resource-group $(terraform output -raw resource_group_name) --name $(terraform output -raw cluster_name)
              ;;
            aws)
              aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name $(terraform output -raw cluster_name)
              ;;
            gcp)
              gcloud container clusters get-credentials $(terraform output -raw cluster_name) --zone $(terraform output -raw zone) --project ${{ secrets.GCP_PROJECT_ID }}
              ;;
          esac
          
          # Deploy to Kubernetes
          kubectl apply -f infrastructure/kubernetes/deployments/ -n addtocloud
          kubectl apply -f infrastructure/istio/ -n addtocloud

  # Job 6: Integration Tests
  integration-tests:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: always() && (needs.deploy-frontend.result == 'success' || needs.deploy-backend.result == 'success')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🧪 Run integration tests
        env:
          TEST_URL: ${{ github.ref == 'refs/heads/main' && 'https://addtocloud.tech' || 'https://staging.addtocloud.tech' }}
          API_URL: ${{ github.ref == 'refs/heads/main' && 'https://api.addtocloud.tech' || 'https://staging-api.addtocloud.tech' }}
        run: |
          npm install -g newman
          newman run tests/postman/addtocloud-api.json \
            --environment tests/postman/environments/${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}.json \
            --reporters html,cli \
            --reporter-html-export integration-test-results.html

      - name: 📤 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: integration-test-results.html

  # Job 7: Deployment Notification
  notify:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend, integration-tests]
    if: always()

    steps:
      - name: 📢 Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                title: 'AddToCloud Deployment Status',
                fields: [
                  { title: 'Environment', value: '${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}', short: true },
                  { title: 'Frontend', value: '${{ needs.deploy-frontend.result }}', short: true },
                  { title: 'Backend', value: '${{ needs.deploy-backend.result }}', short: true },
                  { title: 'Tests', value: '${{ needs.integration-tests.result }}', short: true }
                ]
              }]
            }

      - name: 📧 Email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: '🚨 AddToCloud Deployment Failed'
          to: ${{ secrets.NOTIFY_EMAIL }}
          from: AddToCloud CI/CD
          body: |
            Deployment failed for AddToCloud platform.
            
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            Check the workflow logs for more details:
            https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
