name: Deploy Backend to Azure

on:
  push:
    branches: [main]
    paths: ['apps/backend/**']
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: addtocloud-rg
  AZURE_LOCATION: eastus
  ACR_NAME: addtocloudacr
  CONTAINER_NAME: addtocloud-api
  ACI_NAME: addtocloud-api-aci

jobs:
  deploy-azure:
    name: Deploy to Azure Container Instances
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/backend

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Resource Group
      run: |
        az group create --name $AZURE_RESOURCE_GROUP --location $AZURE_LOCATION

    - name: Create Azure Container Registry
      run: |
        az acr create \
          --resource-group $AZURE_RESOURCE_GROUP \
          --name $ACR_NAME \
          --sku Basic \
          --admin-enabled true || echo "ACR already exists"

    - name: Build and push to ACR
      run: |
        # Get ACR login server
        ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --resource-group $AZURE_RESOURCE_GROUP --query "loginServer" --output tsv)
        
        # Login to ACR
        az acr login --name $ACR_NAME
        
        # Build and tag image
        docker build -f Dockerfile.production -t $ACR_LOGIN_SERVER/$CONTAINER_NAME:${{ github.sha }} .
        docker build -f Dockerfile.production -t $ACR_LOGIN_SERVER/$CONTAINER_NAME:latest .
        
        # Push image
        docker push $ACR_LOGIN_SERVER/$CONTAINER_NAME:${{ github.sha }}
        docker push $ACR_LOGIN_SERVER/$CONTAINER_NAME:latest
        
        echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV

    - name: Deploy to Azure Container Instances
      run: |
        # Get ACR credentials
        ACR_USERNAME=$(az acr credential show --name $ACR_NAME --query "username" --output tsv)
        ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --query "passwords[0].value" --output tsv)
        
        # Deploy container instance
        az container create \
          --resource-group $AZURE_RESOURCE_GROUP \
          --name $ACI_NAME \
          --image $ACR_LOGIN_SERVER/$CONTAINER_NAME:latest \
          --registry-login-server $ACR_LOGIN_SERVER \
          --registry-username $ACR_USERNAME \
          --registry-password $ACR_PASSWORD \
          --dns-name-label addtocloud-api-${{ github.sha }} \
          --ports 8080 \
          --environment-variables \
            PORT=8080 \
            GIN_MODE=release \
          --cpu 1 \
          --memory 1 \
          --restart-policy Always

    - name: Get container endpoint
      run: |
        # Wait for container to be running
        sleep 30
        
        # Get container details
        FQDN=$(az container show \
          --resource-group $AZURE_RESOURCE_GROUP \
          --name $ACI_NAME \
          --query "ipAddress.fqdn" \
          --output tsv)
        
        IP=$(az container show \
          --resource-group $AZURE_RESOURCE_GROUP \
          --name $ACI_NAME \
          --query "ipAddress.ip" \
          --output tsv)
        
        echo "🚀 Backend API deployed successfully to Azure!"
        echo "📍 API Endpoint: http://$FQDN:8080"
        echo "📍 IP Address: http://$IP:8080"
        echo "🔍 Health Check: http://$FQDN:8080/health"
        echo "📋 Services API: http://$FQDN:8080/api/v1/cloud/services"
        
        # Save endpoint for frontend configuration
        echo "API_ENDPOINT=http://$FQDN:8080" >> $GITHUB_ENV
