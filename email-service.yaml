apiVersion: apps/v1
kind: Deployment
metadata:
  name: addtocloud-email-service
  namespace: default
  labels:
    app: addtocloud-email-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: addtocloud-email-service
  template:
    metadata:
      labels:
        app: addtocloud-email-service
    spec:
      containers:
      - name: email-service
        image: golang:1.22-alpine
        workingDir: /app
        command: ["/bin/sh"]
        args: ["-c", "echo 'package main\nimport (\n\"encoding/json\"\n\"fmt\"\n\"log\"\n\"net/http\"\n\"net/smtp\"\n\"os\"\n\"strings\"\n)\ntype EmailRequest struct {\nName string `json:\"name\"`\nEmail string `json:\"email\"`\nSubject string `json:\"subject\"`\nMessage string `json:\"message\"`\n}\ntype EmailResponse struct {\nStatus string `json:\"status\"`\nMessage string `json:\"message\"`\nID string `json:\"id\"`\n}\nfunc sendEmail(req EmailRequest) error {\nsmtpHost := os.Getenv(\"SMTP_HOST\")\nsmtpPort := os.Getenv(\"SMTP_PORT\")\nfromEmail := os.Getenv(\"FROM_EMAIL\")\ntoEmail := os.Getenv(\"TO_EMAIL\")\npassword := os.Getenv(\"EMAIL_PASSWORD\")\nif smtpHost == \"\" {\nreturn fmt.Errorf(\"SMTP configuration not available\")\n}\nauth := smtp.PlainAuth(\"\", fromEmail, password, smtpHost)\nto := []string{toEmail}\nmsg := []byte(\"To: \" + toEmail + \"\\r\\n\" +\n\"Subject: [AddToCloud] \" + req.Subject + \"\\r\\n\" +\n\"\\r\\n\" +\n\"Name: \" + req.Name + \"\\r\\n\" +\n\"Email: \" + req.Email + \"\\r\\n\" +\n\"Message: \" + req.Message + \"\\r\\n\")\nreturn smtp.SendMail(smtpHost+\":\"+smtpPort, auth, fromEmail, to, msg)\n}\nfunc emailHandler(w http.ResponseWriter, r *http.Request) {\nw.Header().Set(\"Content-Type\", \"application/json\")\nw.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\nw.Header().Set(\"Access-Control-Allow-Methods\", \"POST, OPTIONS\")\nw.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type\")\nif r.Method == \"OPTIONS\" {\nw.WriteHeader(http.StatusOK)\nreturn\n}\nif r.Method != \"POST\" {\nw.WriteHeader(http.StatusMethodNotAllowed)\njson.NewEncoder(w).Encode(EmailResponse{Status: \"error\", Message: \"Method not allowed\"})\nreturn\n}\nvar req EmailRequest\nif err := json.NewDecoder(r.Body).Decode(&req); err != nil {\nw.WriteHeader(http.StatusBadRequest)\njson.NewEncoder(w).Encode(EmailResponse{Status: \"error\", Message: \"Invalid request\"})\nreturn\n}\nif req.Name == \"\" || req.Email == \"\" || req.Message == \"\" {\nw.WriteHeader(http.StatusBadRequest)\njson.NewEncoder(w).Encode(EmailResponse{Status: \"error\", Message: \"Missing required fields\"})\nreturn\n}\nif err := sendEmail(req); err != nil {\nlog.Printf(\"Email send error: %v\", err)\nw.WriteHeader(http.StatusOK)\njson.NewEncoder(w).Encode(EmailResponse{\nStatus: \"received\",\nMessage: \"Your message has been received. Email service will be configured shortly.\",\nID: fmt.Sprintf(\"req-%d\", len(req.Name)),\n})\nreturn\n}\nw.WriteHeader(http.StatusOK)\njson.NewEncoder(w).Encode(EmailResponse{\nStatus: \"sent\",\nMessage: \"Email sent successfully\",\nID: fmt.Sprintf(\"email-%d\", len(req.Email)),\n})\n}\nfunc healthHandler(w http.ResponseWriter, r *http.Request) {\nw.Header().Set(\"Content-Type\", \"application/json\")\nfmt.Fprintf(w, `{\"status\":\"healthy\",\"service\":\"email\",\"cluster\":\"%s\"}`, os.Getenv(\"CLUSTER_NAME\"))\n}\nfunc main() {\nhttp.HandleFunc(\"/api/v1/contact\", emailHandler)\nhttp.HandleFunc(\"/api/health\", healthHandler)\nport := os.Getenv(\"PORT\")\nif port == \"\" {\nport = \"8080\"\n}\nlog.Printf(\"Email service starting on port %s\", port)\nlog.Fatal(http.ListenAndServe(\":\"+port, nil))\n}' > main.go && go run main.go"]
        ports:
        - containerPort: 8080
        env:
        - name: CLUSTER_NAME
          value: "Production"
        - name: PORT
          value: "8080"
        - name: SMTP_HOST
          value: "smtp.gmail.com"
        - name: SMTP_PORT
          value: "587"
        - name: FROM_EMAIL
          value: "noreply@addtocloud.tech"
        - name: TO_EMAIL
          value: "admin@addtocloud.tech"
        - name: EMAIL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: email-credentials
              key: password
              optional: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
---
apiVersion: v1
kind: Service
metadata:
  name: addtocloud-email-service
  namespace: default
spec:
  selector:
    app: addtocloud-email-service
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: Secret
metadata:
  name: email-credentials
  namespace: default
type: Opaque
data:
  # Base64 encoded placeholder - replace with actual credentials
  password: cGxhY2Vob2xkZXJfcGFzc3dvcmQ=
